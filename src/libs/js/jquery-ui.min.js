/*! jQuery UI - v1.12.1 - 2020-12-20
* http://jqueryui.com
* Includes: widget.js, keycode.js, widgets/date-picker.js, widgets/mouse.js, widgets/slider.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

!(function (e) { typeof define === 'function' && define.amd ? define(['jquery'], e) : e(jQuery); }((M) => {
  M.ui = M.ui || {}; M.ui.version = '1.12.1'; let s; let i = 0; const o = Array.prototype.slice; M.cleanData = (s = M.cleanData, function (e) { for (var t, i, a = 0; (i = e[a]) != null; a++) try { (t = M._data(i, 'events')) && t.remove && M(i).triggerHandler('remove'); } catch (e) {}s(e); }), M.widget = function (e, i, t) {
    let a; let s; let n; const r = {}; const o = e.split('.')[0]; const l = `${o}-${e = e.split('.')[1]}`; return t || (t = i, i = M.Widget), M.isArray(t) && (t = M.extend.apply(null, [{}].concat(t))), M.expr[':'][l.toLowerCase()] = function (e) { return !!M.data(e, l); }, M[o] = M[o] || {}, a = M[o][e], s = M[o][e] = function (e, t) { if (!this._createWidget) return new s(e, t); arguments.length && this._createWidget(e, t); }, M.extend(s, a, { version: t.version, _proto: M.extend({}, t), _childConstructors: [] }), (n = new i()).options = M.widget.extend({}, n.options), M.each(t, (t, a) => { function s() { return i.prototype[t].apply(this, arguments); } function n(e) { return i.prototype[t].apply(this, e); }M.isFunction(a) ? r[t] = function () { let e; const t = this._super; const i = this._superApply; return this._super = s, this._superApply = n, e = a.apply(this, arguments), this._super = t, this._superApply = i, e; } : r[t] = a; }), s.prototype = M.widget.extend(n, { widgetEventPrefix: a && n.widgetEventPrefix || e }, r, {
      constructor: s, namespace: o, widgetName: e, widgetFullName: l,
    }), a ? (M.each(a._childConstructors, (e, t) => { const i = t.prototype; M.widget(`${i.namespace}.${i.widgetName}`, s, t._proto); }), delete a._childConstructors) : i._childConstructors.push(s), M.widget.bridge(e, s), s;
  }, M.widget.extend = function (e) { for (var t, i, a = o.call(arguments, 1), s = 0, n = a.length; s < n; s++) for (t in a[s])i = a[s][t], a[s].hasOwnProperty(t) && void 0 !== i && (M.isPlainObject(i) ? e[t] = M.isPlainObject(e[t]) ? M.widget.extend({}, e[t], i) : M.widget.extend({}, i) : e[t] = i); return e; }, M.widget.bridge = function (n, t) { const r = t.prototype.widgetFullName || n; M.fn[n] = function (i) { const e = typeof i === 'string'; const a = o.call(arguments, 1); let s = this; return e ? this.length || i !== 'instance' ? this.each(function () { let e; const t = M.data(this, r); return i === 'instance' ? (s = t, !1) : t ? M.isFunction(t[i]) && i.charAt(0) !== '_' ? (e = t[i].apply(t, a)) !== t && void 0 !== e ? (s = e && e.jquery ? s.pushStack(e.get()) : e, !1) : void 0 : M.error(`no such method '${i}' for ${n} widget instance`) : M.error(`cannot call methods on ${n} prior to initialization; attempted to call method '${i}'`); }) : s = void 0 : (a.length && (i = M.widget.extend.apply(null, [i].concat(a))), this.each(function () { const e = M.data(this, r); e ? (e.option(i || {}), e._init && e._init()) : M.data(this, r, new t(i, this)); })), s; }; }, M.Widget = function () {}, M.Widget._childConstructors = [], M.Widget.prototype = {
    widgetName: 'widget',
    widgetEventPrefix: '',
    defaultElement: '<div>',
    options: { classes: {}, disabled: !1, create: null },
    _createWidget(e, t) { t = M(t || this.defaultElement || this)[0], this.element = M(t), this.uuid = i++, this.eventNamespace = `.${this.widgetName}${this.uuid}`, this.bindings = M(), this.hoverable = M(), this.focusable = M(), this.classesElementLookup = {}, t !== this && (M.data(t, this.widgetFullName, this), this._on(!0, this.element, { remove(e) { e.target === t && this.destroy(); } }), this.document = M(t.style ? t.ownerDocument : t.document || t), this.window = M(this.document[0].defaultView || this.document[0].parentWindow)), this.options = M.widget.extend({}, this.options, this._getCreateOptions(), e), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger('create', null, this._getCreateEventData()), this._init(); },
    _getCreateOptions() { return {}; },
    _getCreateEventData: M.noop,
    _create: M.noop,
    _init: M.noop,
    destroy() { const i = this; this._destroy(), M.each(this.classesElementLookup, (e, t) => { i._removeClass(t, e); }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr('aria-disabled'), this.bindings.off(this.eventNamespace); },
    _destroy: M.noop,
    widget() { return this.element; },
    option(e, t) { let i; let a; let s; let n = e; if (arguments.length === 0) return M.widget.extend({}, this.options); if (typeof e === 'string') if (n = {}, e = (i = e.split('.')).shift(), i.length) { for (a = n[e] = M.widget.extend({}, this.options[e]), s = 0; s < i.length - 1; s++)a[i[s]] = a[i[s]] || {}, a = a[i[s]]; if (e = i.pop(), arguments.length === 1) return void 0 === a[e] ? null : a[e]; a[e] = t; } else { if (arguments.length === 1) return void 0 === this.options[e] ? null : this.options[e]; n[e] = t; } return this._setOptions(n), this; },
    _setOptions(e) { for (const t in e) this._setOption(t, e[t]); return this; },
    _setOption(e, t) { return e === 'classes' && this._setOptionClasses(t), this.options[e] = t, e === 'disabled' && this._setOptionDisabled(t), this; },
    _setOptionClasses(e) {
      let t; let i; let a; for (t in e) {
        a = this.classesElementLookup[t], e[t] !== this.options.classes[t] && a && a.length && (i = M(a.get()), this._removeClass(a, t), i.addClass(this._classes({
          element: i, keys: t, classes: e, add: !0,
        })));
      }
    },
    _setOptionDisabled(e) { this._toggleClass(this.widget(), `${this.widgetFullName}-disabled`, null, !!e), e && (this._removeClass(this.hoverable, null, 'ui-state-hover'), this._removeClass(this.focusable, null, 'ui-state-focus')); },
    enable() { return this._setOptions({ disabled: !1 }); },
    disable() { return this._setOptions({ disabled: !0 }); },
    _classes(s) { const n = []; const r = this; function e(e, t) { for (var i, a = 0; a < e.length; a++)i = r.classesElementLookup[e[a]] || M(), i = s.add ? M(M.unique(i.get().concat(s.element.get()))) : M(i.not(s.element).get()), r.classesElementLookup[e[a]] = i, n.push(e[a]), t && s.classes[e[a]] && n.push(s.classes[e[a]]); } return s = M.extend({ element: this.element, classes: this.options.classes || {} }, s), this._on(s.element, { remove: '_untrackClassesElement' }), s.keys && e(s.keys.match(/\S+/g) || [], !0), s.extra && e(s.extra.match(/\S+/g) || []), n.join(' '); },
    _untrackClassesElement(i) { const a = this; M.each(a.classesElementLookup, (e, t) => { M.inArray(i.target, t) !== -1 && (a.classesElementLookup[e] = M(t.not(i.target).get())); }); },
    _removeClass(e, t, i) { return this._toggleClass(e, t, i, !1); },
    _addClass(e, t, i) { return this._toggleClass(e, t, i, !0); },
    _toggleClass(e, t, i, a) {
      a = typeof a === 'boolean' ? a : i; const s = typeof e === 'string' || e === null; var e = {
        extra: s ? t : i, keys: s ? e : t, element: s ? this.element : e, add: a,
      }; return e.element.toggleClass(this._classes(e), a), this;
    },
    _on(s, n, e) { let r; const o = this; typeof s !== 'boolean' && (e = n, n = s, s = !1), e ? (n = r = M(n), this.bindings = this.bindings.add(n)) : (e = n, n = this.element, r = this.widget()), M.each(e, (e, t) => { function i() { if (s || !0 !== o.options.disabled && !M(this).hasClass('ui-state-disabled')) return (typeof t === 'string' ? o[t] : t).apply(o, arguments); } typeof t !== 'string' && (i.guid = t.guid = t.guid || i.guid || M.guid++); var a = e.match(/^([\w:-]*)\s*(.*)$/); var e = a[1] + o.eventNamespace; var a = a[2]; a ? r.on(e, a, i) : n.on(e, i); }); },
    _off(e, t) { t = (t || '').split(' ').join(`${this.eventNamespace} `) + this.eventNamespace, e.off(t).off(t), this.bindings = M(this.bindings.not(e).get()), this.focusable = M(this.focusable.not(e).get()), this.hoverable = M(this.hoverable.not(e).get()); },
    _delay(e, t) { const i = this; return setTimeout(function () { return (typeof e === 'string' ? i[e] : e).apply(i, arguments); }, t || 0); },
    _hoverable(e) { this.hoverable = this.hoverable.add(e), this._on(e, { mouseenter(e) { this._addClass(M(e.currentTarget), null, 'ui-state-hover'); }, mouseleave(e) { this._removeClass(M(e.currentTarget), null, 'ui-state-hover'); } }); },
    _focusable(e) { this.focusable = this.focusable.add(e), this._on(e, { focusin(e) { this._addClass(M(e.currentTarget), null, 'ui-state-focus'); }, focusout(e) { this._removeClass(M(e.currentTarget), null, 'ui-state-focus'); } }); },
    _trigger(e, t, i) { let a; let s; const n = this.options[e]; if (i = i || {}, (t = M.Event(t)).type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), t.target = this.element[0], s = t.originalEvent) for (a in s)a in t || (t[a] = s[a]); return this.element.trigger(t, i), !(M.isFunction(n) && !1 === n.apply(this.element[0], [t].concat(i)) || t.isDefaultPrevented()); },
  }, M.each({ show: 'fadeIn', hide: 'fadeOut' }, (n, r) => { M.Widget.prototype[`_${n}`] = function (t, e, i) { let a; typeof e === 'string' && (e = { effect: e }); const s = e ? !0 !== e && typeof e !== 'number' && e.effect || r : n; typeof (e = e || {}) === 'number' && (e = { duration: e }), a = !M.isEmptyObject(e), e.complete = i, e.delay && t.delay(e.delay), a && M.effects && M.effects.effect[s] ? t[n](e) : s !== n && t[s] ? t[s](e.duration, e.easing, i) : t.queue(function (e) { M(this)[n](), i && i.call(t[0]), e(); }); }; }); let n; M.widget, M.ui.keyCode = {
    BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38,
  }; function e() {
    this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = 'ui-date-picker-div', this._inlineClass = 'ui-date-picker-inline', this._appendClass = 'ui-date-picker-append', this._triggerClass = 'ui-date-picker-trigger', this._dialogClass = 'ui-date-picker-dialog', this._disableClass = 'ui-date-picker-disabled', this._unselectableClass = 'ui-date-picker-unselectable', this._currentClass = 'ui-date-picker-current-day', this._dayOverClass = 'ui-date-picker-days-cell-over', this.regional = [], this.regional[''] = {
      closeText: 'Done', prevText: 'Prev', nextText: 'Next', currentText: 'Today', monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'], weekHeader: 'Wk', dateFormat: 'mm/dd/yy', firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: '',
    }, this._defaults = {
      showOn: 'focus', showAnim: 'fadeIn', showOptions: {}, defaultDate: null, appendText: '', buttonText: '...', buttonImage: '', buttonImageOnly: !1, hideIfNoPrevNext: !1, navigationAsDateFormat: !1, gotoCurrent: !1, changeMonth: !1, changeYear: !1, yearRange: 'c-10:c+10', showOtherMonths: !1, selectOtherMonths: !1, showWeek: !1, calculateWeek: this.iso8601Week, shortYearCutoff: '+10', minDate: null, maxDate: null, duration: 'fast', beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: '', altFormat: '', constrainInput: !0, showButtonPanel: !1, autoSize: !1, disabled: !1,
    }, M.extend(this._defaults, this.regional['']), this.regional.en = M.extend(!0, {}, this.regional['']), this.regional['en-US'] = M.extend(!0, {}, this.regional.en), this.dpDiv = a(M(`<div id='${this._mainDivId}' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>`));
  } function a(e) { const t = 'button, .ui-date-picker-prev, .ui-date-picker-next, .ui-date-picker-calendar td a'; return e.on('mouseout', t, function () { M(this).removeClass('ui-state-hover'), this.className.indexOf('ui-date-picker-prev') !== -1 && M(this).removeClass('ui-date-picker-prev-hover'), this.className.indexOf('ui-date-picker-next') !== -1 && M(this).removeClass('ui-date-picker-next-hover'); }).on('mouseover', t, r); } function r() { M.datepicker._isDisabledDatepicker((n.inline ? n.dpDiv.parent() : n.input)[0]) || (M(this).parents('.ui-date-picker-calendar').find('a').removeClass('ui-state-hover'), M(this).addClass('ui-state-hover'), this.className.indexOf('ui-date-picker-prev') !== -1 && M(this).addClass('ui-date-picker-prev-hover'), this.className.indexOf('ui-date-picker-next') !== -1 && M(this).addClass('ui-date-picker-next-hover')); } function l(e, t) { for (const i in M.extend(e, t), t)t[i] == null && (e[i] = t[i]); return e; }M.extend(M.ui, { datepicker: { version: '1.12.1' } }), M.extend(e.prototype, {
    markerClassName: 'hasDatepicker',
    maxRows: 4,
    _widgetDatepicker() { return this.dpDiv; },
    setDefaults(e) { return l(this._defaults, e || {}), this; },
    _attachDatepicker(e, t) { let i; const a = e.nodeName.toLowerCase(); const s = a === 'div' || a === 'span'; e.id || (this.uuid += 1, e.id = `dp${this.uuid}`), (i = this._newInst(M(e), s)).settings = M.extend({}, t || {}), a === 'input' ? this._connectDatepicker(e, i) : s && this._inlineDatepicker(e, i); },
    _newInst(e, t) {
      return {
        id: e[0].id.replace(/([^A-Za-z0-9_\-])/g, '\\\\$1'), input: e, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: t, dpDiv: t ? a(M(`<div class='${this._inlineClass} ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>`)) : this.dpDiv,
      };
    },
    _connectDatepicker(e, t) { const i = M(e); t.append = M([]), t.trigger = M([]), i.hasClass(this.markerClassName) || (this._attachments(i, t), i.addClass(this.markerClassName).on('keydown', this._doKeyDown).on('keypress', this._doKeyPress).on('keyup', this._doKeyUp), this._autoSize(t), M.data(e, 'datepicker', t), t.settings.disabled && this._disableDatepicker(e)); },
    _attachments(e, t) { let i; let a = this._get(t, 'appendText'); const s = this._get(t, 'isRTL'); t.append && t.append.remove(), a && (t.append = M(`<span class='${this._appendClass}'>${a}</span>`), e[s ? 'before' : 'after'](t.append)), e.off('focus', this._showDatepicker), t.trigger && t.trigger.remove(), (i = this._get(t, 'showOn')) !== 'focus' && i !== 'both' || e.on('focus', this._showDatepicker), i !== 'button' && i !== 'both' || (a = this._get(t, 'buttonText'), i = this._get(t, 'buttonImage'), t.trigger = M(this._get(t, 'buttonImageOnly') ? M('<img/>').addClass(this._triggerClass).attr({ src: i, alt: a, title: a }) : M("<button type='button'></button>").addClass(this._triggerClass).html(i ? M('<img/>').attr({ src: i, alt: a, title: a }) : a)), e[s ? 'before' : 'after'](t.trigger), t.trigger.on('click', () => (M.datepicker._datepickerShowing && M.datepicker._lastInput === e[0] ? M.datepicker._hideDatepicker() : (M.datepicker._datepickerShowing && M.datepicker._lastInput !== e[0] && M.datepicker._hideDatepicker(), M.datepicker._showDatepicker(e[0])), !1))); },
    _autoSize(e) { let t; let i; let a; let s; let n; let r; this._get(e, 'autoSize') && !e.inline && (n = new Date(2009, 11, 20), (r = this._get(e, 'dateFormat')).match(/[DM]/) && (t = function (e) { for (s = a = i = 0; s < e.length; s++)e[s].length > i && (i = e[s].length, a = s); return a; }, n.setMonth(t(this._get(e, r.match(/MM/) ? 'monthNames' : 'monthNamesShort'))), n.setDate(t(this._get(e, r.match(/DD/) ? 'dayNames' : 'dayNamesShort')) + 20 - n.getDay())), e.input.attr('size', this._formatDate(e, n).length)); },
    _inlineDatepicker(e, t) { const i = M(e); i.hasClass(this.markerClassName) || (i.addClass(this.markerClassName).append(t.dpDiv), M.data(e, 'datepicker', t), this._setDate(t, this._getDefaultDate(t), !0), this._updateDatepicker(t), this._updateAlternate(t), t.settings.disabled && this._disableDatepicker(e), t.dpDiv.css('display', 'block')); },
    _dialogDatepicker(e, t, i, a, s) { let n; let r = this._dialogInst; return r || (this.uuid += 1, n = `dp${this.uuid}`, this._dialogInput = M(`<input type='text' id='${n}' style='position: absolute; top: -100px; width: 0px;'/>`), this._dialogInput.on('keydown', this._doKeyDown), M('body').append(this._dialogInput), (r = this._dialogInst = this._newInst(this._dialogInput, !1)).settings = {}, M.data(this._dialogInput[0], 'datepicker', r)), l(r.settings, a || {}), t = t && t.constructor === Date ? this._formatDate(r, t) : t, this._dialogInput.val(t), this._pos = s ? s.length ? s : [s.pageX, s.pageY] : null, this._pos || (n = document.documentElement.clientWidth, a = document.documentElement.clientHeight, t = document.documentElement.scrollLeft || document.body.scrollLeft, s = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [n / 2 - 100 + t, a / 2 - 150 + s]), this._dialogInput.css('left', `${this._pos[0] + 20}px`).css('top', `${this._pos[1]}px`), r.settings.onSelect = i, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), M.blockUI && M.blockUI(this.dpDiv), M.data(this._dialogInput[0], 'datepicker', r), this; },
    _destroyDatepicker(e) {
      let t; const i = M(e); const a = M.data(e, 'datepicker'); i.hasClass(this.markerClassName) && (t = e.nodeName.toLowerCase(), M.removeData(e, 'datepicker'), t === 'input' ? (a.append.remove(), a.trigger.remove(), i.removeClass(this.markerClassName).off('focus', this._showDatepicker).off('keydown', this._doKeyDown).off('keypress', this._doKeyPress)
        .off('keyup', this._doKeyUp)) : t !== 'div' && t !== 'span' || i.removeClass(this.markerClassName).empty(), n === a && (n = null));
    },
    _enableDatepicker(t) {
      let e; let i = M(t); const a = M.data(t, 'datepicker'); i.hasClass(this.markerClassName) && ((e = t.nodeName.toLowerCase()) === 'input' ? (t.disabled = !1, a.trigger.filter('button').each(function () { this.disabled = !1; }).end().filter('img')
        .css({ opacity: '1.0', cursor: '' })) : e !== 'div' && e !== 'span' || ((i = i.children(`.${this._inlineClass}`)).children().removeClass('ui-state-disabled'), i.find('select.ui-date-picker-month, select.ui-date-picker-year').prop('disabled', !1)), this._disabledInputs = M.map(this._disabledInputs, (e) => (e === t ? null : e)));
    },
    _disableDatepicker(t) {
      let e; let i = M(t); const a = M.data(t, 'datepicker'); i.hasClass(this.markerClassName) && ((e = t.nodeName.toLowerCase()) === 'input' ? (t.disabled = !0, a.trigger.filter('button').each(function () { this.disabled = !0; }).end().filter('img')
        .css({ opacity: '0.5', cursor: 'default' })) : e !== 'div' && e !== 'span' || ((i = i.children(`.${this._inlineClass}`)).children().addClass('ui-state-disabled'), i.find('select.ui-date-picker-month, select.ui-date-picker-year').prop('disabled', !0)), this._disabledInputs = M.map(this._disabledInputs, (e) => (e === t ? null : e)), this._disabledInputs[this._disabledInputs.length] = t);
    },
    _isDisabledDatepicker(e) { if (!e) return !1; for (let t = 0; t < this._disabledInputs.length; t++) if (this._disabledInputs[t] === e) return !0; return !1; },
    _getInst(e) { try { return M.data(e, 'datepicker'); } catch (e) { throw 'Missing instance data for this date-picker'; } },
    _optionDatepicker(e, t, i) { let a; let s; let n; let r; const o = this._getInst(e); if (arguments.length === 2 && typeof t === 'string') return t === 'defaults' ? M.extend({}, M.datepicker._defaults) : o ? t === 'all' ? M.extend({}, o.settings) : this._get(o, t) : null; a = t || {}, typeof t === 'string' && ((a = {})[t] = i), o && (this._curInst === o && this._hideDatepicker(), s = this._getDateDatepicker(e, !0), n = this._getMinMaxDate(o, 'min'), r = this._getMinMaxDate(o, 'max'), l(o.settings, a), n !== null && void 0 !== a.dateFormat && void 0 === a.minDate && (o.settings.minDate = this._formatDate(o, n)), r !== null && void 0 !== a.dateFormat && void 0 === a.maxDate && (o.settings.maxDate = this._formatDate(o, r)), 'disabled' in a && (a.disabled ? this._disableDatepicker(e) : this._enableDatepicker(e)), this._attachments(M(e), o), this._autoSize(o), this._setDate(o, s), this._updateAlternate(o), this._updateDatepicker(o)); },
    _changeDatepicker(e, t, i) { this._optionDatepicker(e, t, i); },
    _refreshDatepicker(e) { e = this._getInst(e); e && this._updateDatepicker(e); },
    _setDateDatepicker(e, t) { e = this._getInst(e); e && (this._setDate(e, t), this._updateDatepicker(e), this._updateAlternate(e)); },
    _getDateDatepicker(e, t) { e = this._getInst(e); return e && !e.inline && this._setDateFromField(e, t), e ? this._getDate(e) : null; },
    _doKeyDown(e) { let t; let i; const a = M.datepicker._getInst(e.target); let s = !0; const n = a.dpDiv.is('.ui-date-picker-rtl'); if (a._keyEvent = !0, M.datepicker._datepickerShowing) switch (e.keyCode) { case 9: M.datepicker._hideDatepicker(), s = !1; break; case 13: return (i = M(`td.${M.datepicker._dayOverClass}:not(.${M.datepicker._currentClass})`, a.dpDiv))[0] && M.datepicker._selectDay(e.target, a.selectedMonth, a.selectedYear, i[0]), (t = M.datepicker._get(a, 'onSelect')) ? (i = M.datepicker._formatDate(a), t.apply(a.input ? a.input[0] : null, [i, a])) : M.datepicker._hideDatepicker(), !1; case 27: M.datepicker._hideDatepicker(); break; case 33: M.datepicker._adjustDate(e.target, e.ctrlKey ? -M.datepicker._get(a, 'stepBigMonths') : -M.datepicker._get(a, 'stepMonths'), 'M'); break; case 34: M.datepicker._adjustDate(e.target, e.ctrlKey ? +M.datepicker._get(a, 'stepBigMonths') : +M.datepicker._get(a, 'stepMonths'), 'M'); break; case 35: (e.ctrlKey || e.metaKey) && M.datepicker._clearDate(e.target), s = e.ctrlKey || e.metaKey; break; case 36: (e.ctrlKey || e.metaKey) && M.datepicker._gotoToday(e.target), s = e.ctrlKey || e.metaKey; break; case 37: (e.ctrlKey || e.metaKey) && M.datepicker._adjustDate(e.target, n ? 1 : -1, 'D'), s = e.ctrlKey || e.metaKey, e.originalEvent.altKey && M.datepicker._adjustDate(e.target, e.ctrlKey ? -M.datepicker._get(a, 'stepBigMonths') : -M.datepicker._get(a, 'stepMonths'), 'M'); break; case 38: (e.ctrlKey || e.metaKey) && M.datepicker._adjustDate(e.target, -7, 'D'), s = e.ctrlKey || e.metaKey; break; case 39: (e.ctrlKey || e.metaKey) && M.datepicker._adjustDate(e.target, n ? -1 : 1, 'D'), s = e.ctrlKey || e.metaKey, e.originalEvent.altKey && M.datepicker._adjustDate(e.target, e.ctrlKey ? +M.datepicker._get(a, 'stepBigMonths') : +M.datepicker._get(a, 'stepMonths'), 'M'); break; case 40: (e.ctrlKey || e.metaKey) && M.datepicker._adjustDate(e.target, 7, 'D'), s = e.ctrlKey || e.metaKey; break; default: s = !1; } else e.keyCode === 36 && e.ctrlKey ? M.datepicker._showDatepicker(this) : s = !1; s && (e.preventDefault(), e.stopPropagation()); },
    _doKeyPress(e) { let t; let i = M.datepicker._getInst(e.target); if (M.datepicker._get(i, 'constrainInput')) return t = M.datepicker._possibleChars(M.datepicker._get(i, 'dateFormat')), i = String.fromCharCode(e.charCode == null ? e.keyCode : e.charCode), e.ctrlKey || e.metaKey || i < ' ' || !t || t.indexOf(i) > -1; },
    _doKeyUp(e) { const t = M.datepicker._getInst(e.target); if (t.input.val() !== t.lastVal) try { M.datepicker.parseDate(M.datepicker._get(t, 'dateFormat'), t.input ? t.input.val() : null, M.datepicker._getFormatConfig(t)) && (M.datepicker._setDateFromField(t), M.datepicker._updateAlternate(t), M.datepicker._updateDatepicker(t)); } catch (e) {} return !0; },
    _showDatepicker(e) {
      let t; let i; let a; let s; (e = e.target || e).nodeName.toLowerCase() !== 'input' && (e = M('input', e.parentNode)[0]), M.datepicker._isDisabledDatepicker(e) || M.datepicker._lastInput === e || (s = M.datepicker._getInst(e), M.datepicker._curInst && M.datepicker._curInst !== s && (M.datepicker._curInst.dpDiv.stop(!0, !0), s && M.datepicker._datepickerShowing && M.datepicker._hideDatepicker(M.datepicker._curInst.input[0])), !1 !== (i = (a = M.datepicker._get(s, 'beforeShow')) ? a.apply(e, [e, s]) : {}) && (l(s.settings, i), s.lastVal = null, M.datepicker._lastInput = e, M.datepicker._setDateFromField(s), M.datepicker._inDialog && (e.value = ''), M.datepicker._pos || (M.datepicker._pos = M.datepicker._findPos(e), M.datepicker._pos[1] += e.offsetHeight), t = !1, M(e).parents().each(function () { return !(t |= M(this).css('position') === 'fixed'); }), a = { left: M.datepicker._pos[0], top: M.datepicker._pos[1] }, M.datepicker._pos = null, s.dpDiv.empty(), s.dpDiv.css({ position: 'absolute', display: 'block', top: '-1000px' }), M.datepicker._updateDatepicker(s), a = M.datepicker._checkOffset(s, a, t), s.dpDiv.css({
        position: M.datepicker._inDialog && M.blockUI ? 'static' : t ? 'fixed' : 'absolute', display: 'none', left: `${a.left}px`, top: `${a.top}px`,
      }), s.inline || (i = M.datepicker._get(s, 'showAnim'), a = M.datepicker._get(s, 'duration'), s.dpDiv.css('z-index', (function (e) { for (var t, i; e.length && e[0] !== document;) { if (((t = e.css('position')) === 'absolute' || t === 'relative' || t === 'fixed') && (i = parseInt(e.css('zIndex'), 10), !isNaN(i) && i !== 0)) return i; e = e.parent(); } return 0; }(M(e))) + 1), M.datepicker._datepickerShowing = !0, M.effects && M.effects.effect[i] ? s.dpDiv.show(i, M.datepicker._get(s, 'showOptions'), a) : s.dpDiv[i || 'show'](i ? a : null), M.datepicker._shouldFocusInput(s) && s.input.trigger('focus'), M.datepicker._curInst = s)));
    },
    _updateDatepicker(e) { this.maxRows = 4, (n = e).dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e); let t; const i = this._getNumberOfMonths(e); const a = i[1]; const s = e.dpDiv.find(`.${this._dayOverClass} a`); s.length > 0 && r.apply(s.get(0)), e.dpDiv.removeClass('ui-date-picker-multi-2 ui-date-picker-multi-3 ui-date-picker-multi-4').width(''), a > 1 && e.dpDiv.addClass(`ui-datepicker-multi-${a}`).css('width', `${17 * a}em`), e.dpDiv[`${i[0] !== 1 || i[1] !== 1 ? 'add' : 'remove'}Class`]('ui-date-picker-multi'), e.dpDiv[`${this._get(e, 'isRTL') ? 'add' : 'remove'}Class`]('ui-date-picker-rtl'), e === M.datepicker._curInst && M.datepicker._datepickerShowing && M.datepicker._shouldFocusInput(e) && e.input.trigger('focus'), e.yearshtml && (t = e.yearshtml, setTimeout(() => { t === e.yearshtml && e.yearshtml && e.dpDiv.find('select.ui-date-picker-year:first').replaceWith(e.yearshtml), t = e.yearshtml = null; }, 0)); },
    _shouldFocusInput(e) { return e.input && e.input.is(':visible') && !e.input.is(':disabled') && !e.input.is(':focus'); },
    _checkOffset(e, t, i) { const a = e.dpDiv.outerWidth(); const s = e.dpDiv.outerHeight(); const n = e.input ? e.input.outerWidth() : 0; const r = e.input ? e.input.outerHeight() : 0; const o = document.documentElement.clientWidth + (i ? 0 : M(document).scrollLeft()); const l = document.documentElement.clientHeight + (i ? 0 : M(document).scrollTop()); return t.left -= this._get(e, 'isRTL') ? a - n : 0, t.left -= i && t.left === e.input.offset().left ? M(document).scrollLeft() : 0, t.top -= i && t.top === e.input.offset().top + r ? M(document).scrollTop() : 0, t.left -= Math.min(t.left, t.left + a > o && a < o ? Math.abs(t.left + a - o) : 0), t.top -= Math.min(t.top, t.top + s > l && s < l ? Math.abs(s + r) : 0), t; },
    _findPos(e) { for (var t = this._getInst(e), i = this._get(t, 'isRTL'); e && (e.type === 'hidden' || e.nodeType !== 1 || M.expr.filters.hidden(e));)e = e[i ? 'previousSibling' : 'nextSibling']; return [(t = M(e).offset()).left, t.top]; },
    _hideDatepicker(e) { let t; let i; const a = this._curInst; !a || e && a !== M.data(e, 'datepicker') || this._datepickerShowing && (t = this._get(a, 'showAnim'), i = this._get(a, 'duration'), e = function () { M.datepicker._tidyDialog(a); }, M.effects && (M.effects.effect[t] || M.effects[t]) ? a.dpDiv.hide(t, M.datepicker._get(a, 'showOptions'), i, e) : a.dpDiv[t === 'slideDown' ? 'slideUp' : t === 'fadeIn' ? 'fadeOut' : 'hide'](t ? i : null, e), t || e(), this._datepickerShowing = !1, (e = this._get(a, 'onClose')) && e.apply(a.input ? a.input[0] : null, [a.input ? a.input.val() : '', a]), this._lastInput = null, this._inDialog && (this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' }), M.blockUI && (M.unblockUI(), M('body').append(this.dpDiv))), this._inDialog = !1); },
    _tidyDialog(e) { e.dpDiv.removeClass(this._dialogClass).off('.ui-date-picker-calendar'); },
    _checkExternalClick(e) { let t; M.datepicker._curInst && (t = M(e.target), e = M.datepicker._getInst(t[0]), (t[0].id === M.datepicker._mainDivId || t.parents(`#${M.datepicker._mainDivId}`).length !== 0 || t.hasClass(M.datepicker.markerClassName) || t.closest(`.${M.datepicker._triggerClass}`).length || !M.datepicker._datepickerShowing || M.datepicker._inDialog && M.blockUI) && (!t.hasClass(M.datepicker.markerClassName) || M.datepicker._curInst === e) || M.datepicker._hideDatepicker()); },
    _adjustDate(e, t, i) { const a = M(e); var e = this._getInst(a[0]); this._isDisabledDatepicker(a[0]) || (this._adjustInstDate(e, t + (i === 'M' ? this._get(e, 'showCurrentAtPos') : 0), i), this._updateDatepicker(e)); },
    _gotoToday(e) { const t = M(e); const i = this._getInst(t[0]); this._get(i, 'gotoCurrent') && i.currentDay ? (i.selectedDay = i.currentDay, i.drawMonth = i.selectedMonth = i.currentMonth, i.drawYear = i.selectedYear = i.currentYear) : (e = new Date(), i.selectedDay = e.getDate(), i.drawMonth = i.selectedMonth = e.getMonth(), i.drawYear = i.selectedYear = e.getFullYear()), this._notifyChange(i), this._adjustDate(t); },
    _selectMonthYear(e, t, i) { const a = M(e); var e = this._getInst(a[0]); e[`selected${i === 'M' ? 'Month' : 'Year'}`] = e[`draw${i === 'M' ? 'Month' : 'Year'}`] = parseInt(t.options[t.selectedIndex].value, 10), this._notifyChange(e), this._adjustDate(a); },
    _selectDay(e, t, i, a) { let s = M(e); M(a).hasClass(this._unselectableClass) || this._isDisabledDatepicker(s[0]) || ((s = this._getInst(s[0])).selectedDay = s.currentDay = M('a', a).html(), s.selectedMonth = s.currentMonth = t, s.selectedYear = s.currentYear = i, this._selectDate(e, this._formatDate(s, s.currentDay, s.currentMonth, s.currentYear))); },
    _clearDate(e) { e = M(e); this._selectDate(e, ''); },
    _selectDate(e, t) { let i = M(e); var e = this._getInst(i[0]); t = t != null ? t : this._formatDate(e), e.input && e.input.val(t), this._updateAlternate(e), (i = this._get(e, 'onSelect')) ? i.apply(e.input ? e.input[0] : null, [t, e]) : e.input && e.input.trigger('change'), e.inline ? this._updateDatepicker(e) : (this._hideDatepicker(), this._lastInput = e.input[0], typeof e.input[0] !== 'object' && e.input.trigger('focus'), this._lastInput = null); },
    _updateAlternate(e) { let t; let i; const a = this._get(e, 'altField'); a && (t = this._get(e, 'altFormat') || this._get(e, 'dateFormat'), i = this._getDate(e), e = this.formatDate(t, i, this._getFormatConfig(e)), M(a).val(e)); },
    noWeekends(e) { e = e.getDay(); return [e > 0 && e < 6, '']; },
    iso8601Week(e) { const t = new Date(e.getTime()); return t.setDate(t.getDate() + 4 - (t.getDay() || 7)), e = t.getTime(), t.setMonth(0), t.setDate(1), Math.floor(Math.round((e - t) / 864e5) / 7) + 1; },
    parseDate(t, s, e) { if (t == null || s == null) throw 'Invalid arguments'; if ((s = typeof s === 'object' ? s.toString() : `${s}`) === '') return null; function n(e) { return (e = y + 1 < t.length && t.charAt(y + 1) === e) && y++, e; } function i(e) { var t = n(e); var t = e === '@' ? 14 : e === '!' ? 20 : e === 'y' && t ? 4 : e === 'o' ? 3 : 2; var t = new RegExp(`^\\d{${e === 'y' ? t : 1},${t}}`); if (!(t = s.substring(u).match(t))) throw `Missing number at position ${u}`; return u += t[0].length, parseInt(t[0], 10); } function a(e, t, i) { let a = -1; var t = M.map(n(e) ? i : t, (e, t) => [[t, e]]).sort((e, t) => -(e[1].length - t[1].length)); if (M.each(t, (e, t) => { const i = t[1]; if (s.substr(u, i.length).toLowerCase() === i.toLowerCase()) return a = t[0], u += i.length, !1; }), a !== -1) return a + 1; throw `Unknown name at position ${u}`; } function r() { if (s.charAt(u) !== t.charAt(y)) throw `Unexpected literal at position ${u}`; u++; } for (var o, l, h, u = 0, d = (e ? e.shortYearCutoff : null) || this._defaults.shortYearCutoff, d = typeof d !== 'string' ? d : (new Date()).getFullYear() % 100 + parseInt(d, 10), c = (e ? e.dayNamesShort : null) || this._defaults.dayNamesShort, p = (e ? e.dayNames : null) || this._defaults.dayNames, g = (e ? e.monthNamesShort : null) || this._defaults.monthNamesShort, _ = (e ? e.monthNames : null) || this._defaults.monthNames, f = -1, m = -1, v = -1, k = -1, D = !1, y = 0; y < t.length; y++) if (D)t.charAt(y) !== "'" || n("'") ? r() : D = !1; else switch (t.charAt(y)) { case 'd': v = i('d'); break; case 'D': a('D', c, p); break; case 'o': k = i('o'); break; case 'm': m = i('m'); break; case 'M': m = a('M', g, _); break; case 'y': f = i('y'); break; case '@': f = (h = new Date(i('@'))).getFullYear(), m = h.getMonth() + 1, v = h.getDate(); break; case '!': f = (h = new Date((i('!') - this._ticksTo1970) / 1e4)).getFullYear(), m = h.getMonth() + 1, v = h.getDate(); break; case "'": n("'") ? r() : D = !0; break; default: r(); } if (u < s.length && (l = s.substr(u), !/^\s+/.test(l))) throw `Extra/unparsed characters found in date: ${l}`; if (f === -1 ? f = (new Date()).getFullYear() : f < 100 && (f += (new Date()).getFullYear() - (new Date()).getFullYear() % 100 + (f <= d ? 0 : -100)), k > -1) for (m = 1, v = k; ;) { if (v <= (o = this._getDaysInMonth(f, m - 1))) break; m++, v -= o; } if ((h = this._daylightSavingAdjust(new Date(f, m - 1, v))).getFullYear() !== f || h.getMonth() + 1 !== m || h.getDate() !== v) throw 'Invalid date'; return h; },
    ATOM: 'yy-mm-dd',
    COOKIE: 'D, dd M yy',
    ISO_8601: 'yy-mm-dd',
    RFC_822: 'D, d M y',
    RFC_850: 'DD, dd-M-y',
    RFC_1036: 'D, d M y',
    RFC_1123: 'D, d M yy',
    RFC_2822: 'D, d M yy',
    RSS: 'D, d M y',
    TICKS: '!',
    TIMESTAMP: '@',
    W3C: 'yy-mm-dd',
    _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7,
    formatDate(t, e, i) { if (!e) return ''; function s(e) { return (e = r + 1 < t.length && t.charAt(r + 1) === e) && r++, e; } function a(e, t, i) { let a = `${t}`; if (s(e)) for (;a.length < i;)a = `0${a}`; return a; } function n(e, t, i, a) { return (s(e) ? a : i)[t]; } let r; const o = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort; const l = (i ? i.dayNames : null) || this._defaults.dayNames; const h = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort; const u = (i ? i.monthNames : null) || this._defaults.monthNames; let d = ''; let c = !1; if (e) for (r = 0; r < t.length; r++) if (c)t.charAt(r) !== "'" || s("'") ? d += t.charAt(r) : c = !1; else switch (t.charAt(r)) { case 'd': d += a('d', e.getDate(), 2); break; case 'D': d += n('D', e.getDay(), o, l); break; case 'o': d += a('o', Math.round((new Date(e.getFullYear(), e.getMonth(), e.getDate()).getTime() - new Date(e.getFullYear(), 0, 0).getTime()) / 864e5), 3); break; case 'm': d += a('m', e.getMonth() + 1, 2); break; case 'M': d += n('M', e.getMonth(), h, u); break; case 'y': d += s('y') ? e.getFullYear() : (e.getFullYear() % 100 < 10 ? '0' : '') + e.getFullYear() % 100; break; case '@': d += e.getTime(); break; case '!': d += 1e4 * e.getTime() + this._ticksTo1970; break; case "'": s("'") ? d += "'" : c = !0; break; default: d += t.charAt(r); } return d; },
    _possibleChars(t) { function e(e) { return (e = s + 1 < t.length && t.charAt(s + 1) === e) && s++, e; } for (var i = '', a = !1, s = 0; s < t.length; s++) if (a)t.charAt(s) !== "'" || e("'") ? i += t.charAt(s) : a = !1; else switch (t.charAt(s)) { case 'd': case 'm': case 'y': case '@': i += '0123456789'; break; case 'D': case 'M': return null; case "'": e("'") ? i += "'" : a = !0; break; default: i += t.charAt(s); } return i; },
    _get(e, t) { return (void 0 !== e.settings[t] ? e.settings : this._defaults)[t]; },
    _setDateFromField(e, t) { if (e.input.val() !== e.lastVal) { const i = this._get(e, 'dateFormat'); let a = e.lastVal = e.input ? e.input.val() : null; const s = this._getDefaultDate(e); let n = s; const r = this._getFormatConfig(e); try { n = this.parseDate(i, a, r) || s; } catch (e) { a = t ? '' : a; }e.selectedDay = n.getDate(), e.drawMonth = e.selectedMonth = n.getMonth(), e.drawYear = e.selectedYear = n.getFullYear(), e.currentDay = a ? n.getDate() : 0, e.currentMonth = a ? n.getMonth() : 0, e.currentYear = a ? n.getFullYear() : 0, this._adjustInstDate(e); } },
    _getDefaultDate(e) { return this._restrictMinMax(e, this._determineDate(e, this._get(e, 'defaultDate'), new Date())); },
    _determineDate(o, e, t) { let i; let a; var e = e == null || e === '' ? t : typeof e === 'string' ? (function (e) { try { return M.datepicker.parseDate(M.datepicker._get(o, 'dateFormat'), e, M.datepicker._getFormatConfig(o)); } catch (e) {} for (var t = (e.toLowerCase().match(/^c/) ? M.datepicker._getDate(o) : null) || new Date(), i = t.getFullYear(), a = t.getMonth(), s = t.getDate(), n = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, r = n.exec(e); r;) { switch (r[2] || 'd') { case 'd': case 'D': s += parseInt(r[1], 10); break; case 'w': case 'W': s += 7 * parseInt(r[1], 10); break; case 'm': case 'M': a += parseInt(r[1], 10), s = Math.min(s, M.datepicker._getDaysInMonth(i, a)); break; case 'y': case 'Y': i += parseInt(r[1], 10), s = Math.min(s, M.datepicker._getDaysInMonth(i, a)); }r = n.exec(e); } return new Date(i, a, s); }(e)) : typeof e === 'number' ? isNaN(e) ? t : (i = e, (a = new Date()).setDate(a.getDate() + i), a) : new Date(e.getTime()); return (e = e && e.toString() === 'Invalid Date' ? t : e) && (e.setHours(0), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0)), this._daylightSavingAdjust(e); },
    _daylightSavingAdjust(e) { return e ? (e.setHours(e.getHours() > 12 ? e.getHours() + 2 : 0), e) : null; },
    _setDate(e, t, i) { const a = !t; const s = e.selectedMonth; const n = e.selectedYear; var t = this._restrictMinMax(e, this._determineDate(e, t, new Date())); e.selectedDay = e.currentDay = t.getDate(), e.drawMonth = e.selectedMonth = e.currentMonth = t.getMonth(), e.drawYear = e.selectedYear = e.currentYear = t.getFullYear(), s === e.selectedMonth && n === e.selectedYear || i || this._notifyChange(e), this._adjustInstDate(e), e.input && e.input.val(a ? '' : this._formatDate(e)); },
    _getDate(e) { return !e.currentYear || e.input && e.input.val() === '' ? null : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay)); },
    _attachHandlers(e) {
      const t = this._get(e, 'stepMonths'); const i = `#${e.id.replace(/\\\\/g, '\\')}`; e.dpDiv.find('[data-handler]').map(function () {
        const e = {
          prev() { M.datepicker._adjustDate(i, -t, 'M'); }, next() { M.datepicker._adjustDate(i, +t, 'M'); }, hide() { M.datepicker._hideDatepicker(); }, today() { M.datepicker._gotoToday(i); }, selectDay() { return M.datepicker._selectDay(i, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this), !1; }, selectMonth() { return M.datepicker._selectMonthYear(i, this, 'M'), !1; }, selectYear() { return M.datepicker._selectMonthYear(i, this, 'Y'), !1; },
        }; M(this).on(this.getAttribute('data-event'), e[this.getAttribute('data-handler')]);
      });
    },
    _generateHTML(e) { let t; let i; let a; let s; let n; let r; let o; let l; let h; let u; let d; let c; let p; let g; let _; let f; let m; let v; let k; let D; let y; let M; let w; let b; let C; let x; let I; let N; let S; let A; let F; var O = new Date(); const Y = this._daylightSavingAdjust(new Date(O.getFullYear(), O.getMonth(), O.getDate())); const T = this._get(e, 'isRTL'); const E = this._get(e, 'showButtonPanel'); let j = this._get(e, 'hideIfNoPrevNext'); let K = this._get(e, 'navigationAsDateFormat'); const P = this._getNumberOfMonths(e); let W = this._get(e, 'showCurrentAtPos'); var O = this._get(e, 'stepMonths'); const V = P[0] !== 1 || P[1] !== 1; const L = this._daylightSavingAdjust(e.currentDay ? new Date(e.currentYear, e.currentMonth, e.currentDay) : new Date(9999, 9, 9)); const R = this._getMinMaxDate(e, 'min'); const H = this._getMinMaxDate(e, 'max'); let U = e.drawMonth - W; let z = e.drawYear; if (U < 0 && (U += 12, z--), H) for (t = this._daylightSavingAdjust(new Date(H.getFullYear(), H.getMonth() - P[0] * P[1] + 1, H.getDate())), t = R && t < R ? R : t; this._daylightSavingAdjust(new Date(z, U, 1)) > t;)--U < 0 && (U = 11, z--); for (e.drawMonth = U, e.drawYear = z, W = this._get(e, 'prevText'), W = K ? this.formatDate(W, this._daylightSavingAdjust(new Date(z, U - O, 1)), this._getFormatConfig(e)) : W, i = this._canAdjustMonth(e, -1, z, U) ? `<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='${W}'><span class='ui-icon ui-icon-circle-triangle-${T ? 'e' : 'w'}'>${W}</span></a>` : j ? '' : `<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='${W}'><span class='ui-icon ui-icon-circle-triangle-${T ? 'e' : 'w'}'>${W}</span></a>`, W = this._get(e, 'nextText'), W = K ? this.formatDate(W, this._daylightSavingAdjust(new Date(z, U + O, 1)), this._getFormatConfig(e)) : W, a = this._canAdjustMonth(e, 1, z, U) ? `<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='${W}'><span class='ui-icon ui-icon-circle-triangle-${T ? 'w' : 'e'}'>${W}</span></a>` : j ? '' : `<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='${W}'><span class='ui-icon ui-icon-circle-triangle-${T ? 'w' : 'e'}'>${W}</span></a>`, j = this._get(e, 'currentText'), W = this._get(e, 'gotoCurrent') && e.currentDay ? L : Y, j = K ? this.formatDate(j, W, this._getFormatConfig(e)) : j, K = e.inline ? '' : `<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>${this._get(e, 'closeText')}</button>`, K = E ? `<div class='ui-datepicker-buttonpane ui-widget-content'>${T ? K : ''}${this._isInRange(e, W) ? `<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>${j}</button>` : ''}${T ? '' : K}</div>` : '', s = parseInt(this._get(e, 'firstDay'), 10), s = isNaN(s) ? 0 : s, n = this._get(e, 'showWeek'), r = this._get(e, 'dayNames'), o = this._get(e, 'dayNamesMin'), l = this._get(e, 'monthNames'), h = this._get(e, 'monthNamesShort'), u = this._get(e, 'beforeShowDay'), d = this._get(e, 'showOtherMonths'), c = this._get(e, 'selectOtherMonths'), p = this._getDefaultDate(e), g = '', f = 0; f < P[0]; f++) { for (m = '', this.maxRows = 4, v = 0; v < P[1]; v++) { if (k = this._daylightSavingAdjust(new Date(z, U, e.selectedDay)), w = ' ui-corner-all', D = '', V) { if (D += "<div class='ui-date-picker-group", P[1] > 1) switch (v) { case 0: D += ' ui-date-picker-group-first', w = ` ui-corner-${T ? 'right' : 'left'}`; break; case P[1] - 1: D += ' ui-date-picker-group-last', w = ` ui-corner-${T ? 'left' : 'right'}`; break; default: D += ' ui-date-picker-group-middle', w = ''; }D += "'>"; } for (D += `<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix${w}'>${/all|left/.test(w) && f === 0 ? T ? a : i : ''}${/all|right/.test(w) && f === 0 ? T ? i : a : ''}${this._generateMonthYearHeader(e, U, z, R, H, f > 0 || v > 0, l, h)}</div><table class='ui-datepicker-calendar'><thead><tr>`, y = n ? `<th class='ui-datepicker-week-col'>${this._get(e, 'weekHeader')}</th>` : '', _ = 0; _ < 7; _++)y += `<th scope='col'${(_ + s + 6) % 7 >= 5 ? " class='ui-date-picker-week-end'" : ''}><span title='${r[M = (_ + s) % 7]}'>${o[M]}</span></th>`; for (D += `${y}</tr></thead><tbody>`, b = this._getDaysInMonth(z, U), z === e.selectedYear && U === e.selectedMonth && (e.selectedDay = Math.min(e.selectedDay, b)), w = (this._getFirstDayOfMonth(z, U) - s + 7) % 7, b = Math.ceil((w + b) / 7), C = V && this.maxRows > b ? this.maxRows : b, this.maxRows = C, x = this._daylightSavingAdjust(new Date(z, U, 1 - w)), I = 0; I < C; I++) { for (D += '<tr>', N = n ? `<td class='ui-datepicker-week-col'>${this._get(e, 'calculateWeek')(x)}</td>` : '', _ = 0; _ < 7; _++)S = u ? u.apply(e.input ? e.input[0] : null, [x]) : [!0, ''], F = (A = x.getMonth() !== U) && !c || !S[0] || R && x < R || H && H < x, N += `<td class='${(_ + s + 6) % 7 >= 5 ? ' ui-date-picker-week-end' : ''}${A ? ' ui-date-picker-other-month' : ''}${x.getTime() === k.getTime() && U === e.selectedMonth && e._keyEvent || p.getTime() === x.getTime() && p.getTime() === k.getTime() ? ` ${this._dayOverClass}` : ''}${F ? ` ${this._unselectableClass} ui-state-disabled` : ''}${A && !d ? '' : ` ${S[1]}${x.getTime() === L.getTime() ? ` ${this._currentClass}` : ''}${x.getTime() === Y.getTime() ? ' ui-date-picker-today' : ''}`}'${A && !d || !S[2] ? '' : ` title='${S[2].replace(/'/g, '&#39;')}'`}${F ? '' : ` data-handler='selectDay' data-event='click' data-month='${x.getMonth()}' data-year='${x.getFullYear()}'`}>${A && !d ? '&#xa0;' : F ? `<span class='ui-state-default'>${x.getDate()}</span>` : `<a class='ui-state-default${x.getTime() === Y.getTime() ? ' ui-state-highlight' : ''}${x.getTime() === L.getTime() ? ' ui-state-active' : ''}${A ? ' ui-priority-secondary' : ''}' href='#'>${x.getDate()}</a>`}</td>`, x.setDate(x.getDate() + 1), x = this._daylightSavingAdjust(x); D += `${N}</tr>`; }++U > 11 && (U = 0, z++), m += D += `</tbody></table>${V ? `</div>${P[0] > 0 && v === P[1] - 1 ? "<div class='ui-date-picker-row-break'></div>" : ''}` : ''}`; }g += m; } return g += K, e._keyEvent = !1, g; },
    _generateMonthYearHeader(e, t, i, a, s, n, r, o) { let l; let h; let u; let d; let c; let p; let g; const _ = this._get(e, 'changeMonth'); const f = this._get(e, 'changeYear'); const m = this._get(e, 'showMonthAfterYear'); let v = "<div class='ui-date-picker-title'>"; let k = ''; if (n || !_)k += `<span class='ui-datepicker-month'>${r[t]}</span>`; else { for (l = a && a.getFullYear() === i, h = s && s.getFullYear() === i, k += "<select class='ui-date-picker-month' data-handler='selectMonth' data-event='change'>", u = 0; u < 12; u++)(!l || u >= a.getMonth()) && (!h || u <= s.getMonth()) && (k += `<option value='${u}'${u === t ? " selected='selected'" : ''}>${o[u]}</option>`); k += '</select>'; } if (m || (v += k + (!n && _ && f ? '' : '&#xa0;')), !e.yearshtml) if (e.yearshtml = '', n || !f)v += `<span class='ui-datepicker-year'>${i}</span>`; else { for (d = this._get(e, 'yearRange').split(':'), c = (new Date()).getFullYear(), p = (r = function (e) { e = e.match(/c[+\-].*/) ? i + parseInt(e.substring(1), 10) : e.match(/[+\-].*/) ? c + parseInt(e, 10) : parseInt(e, 10); return isNaN(e) ? c : e; })(d[0]), g = Math.max(p, r(d[1] || '')), p = a ? Math.max(p, a.getFullYear()) : p, g = s ? Math.min(g, s.getFullYear()) : g, e.yearshtml += "<select class='ui-date-picker-year' data-handler='selectYear' data-event='change'>"; p <= g; p++)e.yearshtml += `<option value='${p}'${p === i ? " selected='selected'" : ''}>${p}</option>`; e.yearshtml += '</select>', v += e.yearshtml, e.yearshtml = null; } return v += this._get(e, 'yearSuffix'), m && (v += (!n && _ && f ? '' : '&#xa0;') + k), v += '</div>'; },
    _adjustInstDate(e, t, i) { const a = e.selectedYear + (i === 'Y' ? t : 0); const s = e.selectedMonth + (i === 'M' ? t : 0); var t = Math.min(e.selectedDay, this._getDaysInMonth(a, s)) + (i === 'D' ? t : 0); var t = this._restrictMinMax(e, this._daylightSavingAdjust(new Date(a, s, t))); e.selectedDay = t.getDate(), e.drawMonth = e.selectedMonth = t.getMonth(), e.drawYear = e.selectedYear = t.getFullYear(), i !== 'M' && i !== 'Y' || this._notifyChange(e); },
    _restrictMinMax(e, t) { const i = this._getMinMaxDate(e, 'min'); var e = this._getMinMaxDate(e, 'max'); var t = i && t < i ? i : t; return e && e < t ? e : t; },
    _notifyChange(e) { const t = this._get(e, 'onChangeMonthYear'); t && t.apply(e.input ? e.input[0] : null, [e.selectedYear, e.selectedMonth + 1, e]); },
    _getNumberOfMonths(e) { e = this._get(e, 'numberOfMonths'); return e == null ? [1, 1] : typeof e === 'number' ? [1, e] : e; },
    _getMinMaxDate(e, t) { return this._determineDate(e, this._get(e, `${t}Date`), null); },
    _getDaysInMonth(e, t) { return 32 - this._daylightSavingAdjust(new Date(e, t, 32)).getDate(); },
    _getFirstDayOfMonth(e, t) { return new Date(e, t, 1).getDay(); },
    _canAdjustMonth(e, t, i, a) { var s = this._getNumberOfMonths(e); var s = this._daylightSavingAdjust(new Date(i, a + (t < 0 ? t : s[0] * s[1]), 1)); return t < 0 && s.setDate(this._getDaysInMonth(s.getFullYear(), s.getMonth())), this._isInRange(e, s); },
    _isInRange(e, t) { const i = this._getMinMaxDate(e, 'min'); const a = this._getMinMaxDate(e, 'max'); let s = null; let n = null; let r = this._get(e, 'yearRange'); return r && (e = r.split(':'), r = (new Date()).getFullYear(), s = parseInt(e[0], 10), n = parseInt(e[1], 10), e[0].match(/[+\-].*/) && (s += r), e[1].match(/[+\-].*/) && (n += r)), (!i || t.getTime() >= i.getTime()) && (!a || t.getTime() <= a.getTime()) && (!s || t.getFullYear() >= s) && (!n || t.getFullYear() <= n); },
    _getFormatConfig(e) {
      let t = this._get(e, 'shortYearCutoff'); return {
        shortYearCutoff: t = typeof t !== 'string' ? t : (new Date()).getFullYear() % 100 + parseInt(t, 10), dayNamesShort: this._get(e, 'dayNamesShort'), dayNames: this._get(e, 'dayNames'), monthNamesShort: this._get(e, 'monthNamesShort'), monthNames: this._get(e, 'monthNames'),
      };
    },
    _formatDate(e, t, i, a) { t || (e.currentDay = e.selectedDay, e.currentMonth = e.selectedMonth, e.currentYear = e.selectedYear); t = t ? typeof t === 'object' ? t : this._daylightSavingAdjust(new Date(a, i, t)) : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay)); return this.formatDate(this._get(e, 'dateFormat'), t, this._getFormatConfig(e)); },
  }), M.fn.datepicker = function (e) { if (!this.length) return this; M.datepicker.initialized || (M(document).on('mousedown', M.datepicker._checkExternalClick), M.datepicker.initialized = !0), M(`#${M.datepicker._mainDivId}`).length === 0 && M('body').append(M.datepicker.dpDiv); const t = Array.prototype.slice.call(arguments, 1); return typeof e === 'string' && (e === 'isDisabled' || e === 'getDate' || e === 'widget') || e === 'option' && arguments.length === 2 && typeof arguments[1] === 'string' ? M.datepicker[`_${e}Datepicker`].apply(M.datepicker, [this[0]].concat(t)) : this.each(function () { typeof e === 'string' ? M.datepicker[`_${e}Datepicker`].apply(M.datepicker, [this].concat(t)) : M.datepicker._attachDatepicker(this, e); }); }, M.datepicker = new e(), M.datepicker.initialized = !1, M.datepicker.uuid = (new Date()).getTime(), M.datepicker.version = '1.12.1'; M.datepicker, M.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()); let h = !1; M(document).on('mouseup', () => { h = !1; }); M.widget('ui.mouse', {
    version: '1.12.1', options: { cancel: 'input, textarea, button, select, option', distance: 1, delay: 0 }, _mouseInit() { const t = this; this.element.on(`mousedown.${this.widgetName}`, (e) => t._mouseDown(e)).on(`click.${this.widgetName}`, (e) => { if (!0 === M.data(e.target, `${t.widgetName}.preventClickEvent`)) return M.removeData(e.target, `${t.widgetName}.preventClickEvent`), e.stopImmediatePropagation(), !1; }), this.started = !1; }, _mouseDestroy() { this.element.off(`.${this.widgetName}`), this._mouseMoveDelegate && this.document.off(`mousemove.${this.widgetName}`, this._mouseMoveDelegate).off(`mouseup.${this.widgetName}`, this._mouseUpDelegate); }, _mouseDown(e) { if (!h) { this._mouseMoved = !1, this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e; const t = this; const i = e.which === 1; const a = !(typeof this.options.cancel !== 'string' || !e.target.nodeName) && M(e.target).closest(this.options.cancel).length; return i && !a && this._mouseCapture(e) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(() => { t.mouseDelayMet = !0; }, this.options.delay)), this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = !1 !== this._mouseStart(e), !this._mouseStarted) ? (e.preventDefault(), !0) : (!0 === M.data(e.target, `${this.widgetName}.preventClickEvent`) && M.removeData(e.target, `${this.widgetName}.preventClickEvent`), this._mouseMoveDelegate = function (e) { return t._mouseMove(e); }, this._mouseUpDelegate = function (e) { return t._mouseUp(e); }, this.document.on(`mousemove.${this.widgetName}`, this._mouseMoveDelegate).on(`mouseup.${this.widgetName}`, this._mouseUpDelegate), e.preventDefault(), h = !0)) : !0; } }, _mouseMove(e) { if (this._mouseMoved) { if (M.ui.ie && (!document.documentMode || document.documentMode < 9) && !e.button) return this._mouseUp(e); if (!e.which) if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0; else if (!this.ignoreMissingWhich) return this._mouseUp(e); } return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, e), this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted); }, _mouseUp(e) { this.document.off(`mousemove.${this.widgetName}`, this._mouseMoveDelegate).off(`mouseup.${this.widgetName}`, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, e.target === this._mouseDownEvent.target && M.data(e.target, `${this.widgetName}.preventClickEvent`, !0), this._mouseStop(e)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, h = !1, e.preventDefault(); }, _mouseDistanceMet(e) { return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance; }, _mouseDelayMet() { return this.mouseDelayMet; }, _mouseStart() {}, _mouseDrag() {}, _mouseStop() {}, _mouseCapture() { return !0; },
  }), M.widget('ui.slider', M.ui.mouse, {
    version: '1.12.1',
    widgetEventPrefix: 'slide',
    options: {
      animate: !1, classes: { 'ui-slider': 'ui-corner-all', 'ui-slider-handle': 'ui-corner-all', 'ui-slider-range': 'ui-corner-all ui-widget-header' }, distance: 0, max: 100, min: 0, orientation: 'horizontal', range: !1, step: 1, value: 0, values: null, change: null, slide: null, start: null, stop: null,
    },
    numPages: 5,
    _create() { this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this._addClass(`ui-slider ui-slider-${this.orientation}`, 'ui-widget ui-widget-content'), this._refresh(), this._animateOff = !1; },
    _refresh() { this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue(); },
    _createHandles() { let e; const t = this.options; let i = this.element.find('.ui-slider-handle'); const a = []; const s = t.values && t.values.length || 1; for (i.length > s && (i.slice(s).remove(), i = i.slice(0, s)), e = i.length; e < s; e++)a.push("<span tabindex='0'></span>"); this.handles = i.add(M(a.join('')).appendTo(this.element)), this._addClass(this.handles, 'ui-slider-handle', 'ui-state-default'), this.handle = this.handles.eq(0), this.handles.each(function (e) { M(this).data('ui-slider-handle-index', e).attr('tabIndex', 0); }); },
    _createRange() { const e = this.options; e.range ? (!0 === e.range && (e.values ? e.values.length && e.values.length !== 2 ? e.values = [e.values[0], e.values[0]] : M.isArray(e.values) && (e.values = e.values.slice(0)) : e.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? (this._removeClass(this.range, 'ui-slider-range-min ui-slider-range-max'), this.range.css({ left: '', bottom: '' })) : (this.range = M('<div>').appendTo(this.element), this._addClass(this.range, 'ui-slider-range')), e.range !== 'min' && e.range !== 'max' || this._addClass(this.range, `ui-slider-range-${e.range}`)) : (this.range && this.range.remove(), this.range = null); },
    _setupEvents() { this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), this._focusable(this.handles); },
    _destroy() { this.handles.remove(), this.range && this.range.remove(), this._mouseDestroy(); },
    _mouseCapture(e) { let i; let a; let s; let n; let t; let r; const o = this; const l = this.options; return !l.disabled && (this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() }, this.elementOffset = this.element.offset(), r = { x: e.pageX, y: e.pageY }, i = this._normValueFromMouse(r), a = this._valueMax() - this._valueMin() + 1, this.handles.each(function (e) { const t = Math.abs(i - o.values(e)); (t < a || a === t && (e === o._lastChangedValue || o.values(e) === l.min)) && (a = t, s = M(this), n = e); }), !1 !== this._start(e, n) && (this._mouseSliding = !0, this._handleIndex = n, this._addClass(s, null, 'ui-state-active'), s.trigger('focus'), t = s.offset(), r = !M(e.target).parents().addBack().is('.ui-slider-handle'), this._clickOffset = r ? { left: 0, top: 0 } : { left: e.pageX - t.left - s.width() / 2, top: e.pageY - t.top - s.height() / 2 - (parseInt(s.css('borderTopWidth'), 10) || 0) - (parseInt(s.css('borderBottomWidth'), 10) || 0) + (parseInt(s.css('marginTop'), 10) || 0) }, this.handles.hasClass('ui-state-hover') || this._slide(e, n, i), this._animateOff = !0)); },
    _mouseStart() { return !0; },
    _mouseDrag(e) { var t = { x: e.pageX, y: e.pageY }; var t = this._normValueFromMouse(t); return this._slide(e, this._handleIndex, t), !1; },
    _mouseStop(e) { return this._removeClass(this.handles, null, 'ui-state-active'), this._mouseSliding = !1, this._stop(e, this._handleIndex), this._change(e, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1; },
    _detectOrientation() { this.orientation = this.options.orientation === 'vertical' ? 'vertical' : 'horizontal'; },
    _normValueFromMouse(e) { let t; var e = this.orientation === 'horizontal' ? (t = this.elementSize.width, e.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (t = this.elementSize.height, e.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)); var e = e / t; return e > 1 && (e = 1), e < 0 && (e = 0), this.orientation === 'vertical' && (e = 1 - e), t = this._valueMax() - this._valueMin(), t = this._valueMin() + e * t, this._trimAlignValue(t); },
    _uiHash(e, t, i) { const a = { handle: this.handles[e], handleIndex: e, value: void 0 !== t ? t : this.value() }; return this._hasMultipleValues() && (a.value = void 0 !== t ? t : this.values(e), a.values = i || this.values()), a; },
    _hasMultipleValues() { return this.options.values && this.options.values.length; },
    _start(e, t) { return this._trigger('start', e, this._uiHash(t)); },
    _slide(e, t, i) { let a; let s = this.value(); const n = this.values(); this._hasMultipleValues() && (a = this.values(t ? 0 : 1), s = this.values(t), this.options.values.length === 2 && !0 === this.options.range && (i = t === 0 ? Math.min(a, i) : Math.max(a, i)), n[t] = i), i !== s && !1 !== this._trigger('slide', e, this._uiHash(t, i, n)) && (this._hasMultipleValues() ? this.values(t, i) : this.value(i)); },
    _stop(e, t) { this._trigger('stop', e, this._uiHash(t)); },
    _change(e, t) { this._keySliding || this._mouseSliding || (this._lastChangedValue = t, this._trigger('change', e, this._uiHash(t))); },
    value(e) { return arguments.length ? (this.options.value = this._trimAlignValue(e), this._refreshValue(), void this._change(null, 0)) : this._value(); },
    values(e, t) { let i; let a; let s; if (arguments.length > 1) return this.options.values[e] = this._trimAlignValue(t), this._refreshValue(), void this._change(null, e); if (!arguments.length) return this._values(); if (!M.isArray(e)) return this._hasMultipleValues() ? this._values(e) : this.value(); for (i = this.options.values, a = e, s = 0; s < i.length; s += 1)i[s] = this._trimAlignValue(a[s]), this._change(null, s); this._refreshValue(); },
    _setOption(e, t) { let i; let a = 0; switch (e === 'range' && !0 === this.options.range && (t === 'min' ? (this.options.value = this._values(0), this.options.values = null) : t === 'max' && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null)), M.isArray(this.options.values) && (a = this.options.values.length), this._super(e, t), e) { case 'orientation': this._detectOrientation(), this._removeClass('ui-slider-horizontal ui-slider-vertical')._addClass(`ui-slider-${this.orientation}`), this._refreshValue(), this.options.range && this._refreshRange(t), this.handles.css(t === 'horizontal' ? 'bottom' : 'left', ''); break; case 'value': this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1; break; case 'values': for (this._animateOff = !0, this._refreshValue(), i = a - 1; i >= 0; i--) this._change(null, i); this._animateOff = !1; break; case 'step': case 'min': case 'max': this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1; break; case 'range': this._animateOff = !0, this._refresh(), this._animateOff = !1; } },
    _setOptionDisabled(e) { this._super(e), this._toggleClass(null, 'ui-state-disabled', !!e); },
    _value() { let e = this.options.value; return e = this._trimAlignValue(e); },
    _values(e) { let t; let i; let a; if (arguments.length) return t = this.options.values[e], this._trimAlignValue(t); if (this._hasMultipleValues()) { for (i = this.options.values.slice(), a = 0; a < i.length; a += 1)i[a] = this._trimAlignValue(i[a]); return i; } return []; },
    _trimAlignValue(e) { if (e <= this._valueMin()) return this._valueMin(); if (e >= this._valueMax()) return this._valueMax(); const t = this.options.step > 0 ? this.options.step : 1; const i = (e - this._valueMin()) % t; var e = e - i; return 2 * Math.abs(i) >= t && (e += i > 0 ? t : -t), parseFloat(e.toFixed(5)); },
    _calculateNewMax() { let e = this.options.max; const t = this._valueMin(); const i = this.options.step; (e = Math.round((e - t) / i) * i + t) > this.options.max && (e -= i), this.max = parseFloat(e.toFixed(this._precision())); },
    _precision() { let e = this._precisionOf(this.options.step); return this.options.min !== null && (e = Math.max(e, this._precisionOf(this.options.min))), e; },
    _precisionOf(e) { const t = e.toString(); var e = t.indexOf('.'); return e === -1 ? 0 : t.length - e - 1; },
    _valueMin() { return this.options.min; },
    _valueMax() { return this.max; },
    _refreshRange(e) { e === 'vertical' && this.range.css({ width: '', left: '' }), e === 'horizontal' && this.range.css({ height: '', bottom: '' }); },
    _refreshValue() { let t; let i; let e; let a; let s; const n = this.options.range; const r = this.options; const o = this; const l = !this._animateOff && r.animate; const h = {}; this._hasMultipleValues() ? this.handles.each(function (e) { i = (o.values(e) - o._valueMin()) / (o._valueMax() - o._valueMin()) * 100, h[o.orientation === 'horizontal' ? 'left' : 'bottom'] = `${i}%`, M(this).stop(1, 1)[l ? 'animate' : 'css'](h, r.animate), !0 === o.options.range && (o.orientation === 'horizontal' ? (e === 0 && o.range.stop(1, 1)[l ? 'animate' : 'css']({ left: `${i}%` }, r.animate), e === 1 && o.range[l ? 'animate' : 'css']({ width: `${i - t}%` }, { queue: !1, duration: r.animate })) : (e === 0 && o.range.stop(1, 1)[l ? 'animate' : 'css']({ bottom: `${i}%` }, r.animate), e === 1 && o.range[l ? 'animate' : 'css']({ height: `${i - t}%` }, { queue: !1, duration: r.animate }))), t = i; }) : (e = this.value(), a = this._valueMin(), s = this._valueMax(), i = s !== a ? (e - a) / (s - a) * 100 : 0, h[this.orientation === 'horizontal' ? 'left' : 'bottom'] = `${i}%`, this.handle.stop(1, 1)[l ? 'animate' : 'css'](h, r.animate), n === 'min' && this.orientation === 'horizontal' && this.range.stop(1, 1)[l ? 'animate' : 'css']({ width: `${i}%` }, r.animate), n === 'max' && this.orientation === 'horizontal' && this.range.stop(1, 1)[l ? 'animate' : 'css']({ width: `${100 - i}%` }, r.animate), n === 'min' && this.orientation === 'vertical' && this.range.stop(1, 1)[l ? 'animate' : 'css']({ height: `${i}%` }, r.animate), n === 'max' && this.orientation === 'vertical' && this.range.stop(1, 1)[l ? 'animate' : 'css']({ height: `${100 - i}%` }, r.animate)); },
    _handleEvents: { keydown(e) { let t; let i; let a; const s = M(e.target).data('ui-slider-handle-index'); switch (e.keyCode) { case M.ui.keyCode.HOME: case M.ui.keyCode.END: case M.ui.keyCode.PAGE_UP: case M.ui.keyCode.PAGE_DOWN: case M.ui.keyCode.UP: case M.ui.keyCode.RIGHT: case M.ui.keyCode.DOWN: case M.ui.keyCode.LEFT: if (e.preventDefault(), !this._keySliding && (this._keySliding = !0, this._addClass(M(e.target), null, 'ui-state-active'), !1 === this._start(e, s))) return; } switch (a = this.options.step, t = i = this._hasMultipleValues() ? this.values(s) : this.value(), e.keyCode) { case M.ui.keyCode.HOME: i = this._valueMin(); break; case M.ui.keyCode.END: i = this._valueMax(); break; case M.ui.keyCode.PAGE_UP: i = this._trimAlignValue(t + (this._valueMax() - this._valueMin()) / this.numPages); break; case M.ui.keyCode.PAGE_DOWN: i = this._trimAlignValue(t - (this._valueMax() - this._valueMin()) / this.numPages); break; case M.ui.keyCode.UP: case M.ui.keyCode.RIGHT: if (t === this._valueMax()) return; i = this._trimAlignValue(t + a); break; case M.ui.keyCode.DOWN: case M.ui.keyCode.LEFT: if (t === this._valueMin()) return; i = this._trimAlignValue(t - a); } this._slide(e, s, i); }, keyup(e) { const t = M(e.target).data('ui-slider-handle-index'); this._keySliding && (this._keySliding = !1, this._stop(e, t), this._change(e, t), this._removeClass(M(e.target), null, 'ui-state-active')); } },
  });
}));
