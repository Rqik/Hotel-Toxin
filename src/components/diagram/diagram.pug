mixin diagram({ great = 0, good = 0, satisfactorily = 0,  bad = 0 })
  -
    const votes = great + good + satisfactorily + bad
    const greatPercent = isInteger(great)
    const goodPercent = isInteger(good)
    const satisfactorilyPercent = isInteger(satisfactorily)
    const badPercent = isInteger(bad)

    function isInteger(num) {
      if (Number.isInteger(num)) {
        return (num / votes) * 100;
      }
      return 0;
    }
    const gradients = [
      { start: '255,186,156', end: '255,227,156' },
      { start: '111,207,151', end: '102,210,234' },
      { start: '188,156,255', end: '139,164,249' },
      { start: '144,144,144', end: '61,73,117' },
    ]
    const legendElements = ['Великолепно', 'Хорошо', 'Удовлетворительно', 'Разочарован']
    const svgElements = {
      great: {
        gradient: 'url(#lgrad0)',
        strokeDasharray: `${greatPercent - 0.5} ${100 - greatPercent + 0.5}`,
        strokeDashoffset: `${100 - badPercent - satisfactorilyPercent  - goodPercent+ 25}`,
        votes: great,
      },
      good: {
        gradient: 'url(#lgrad1)',
        strokeDasharray: `${goodPercent - 0.5} ${100 - goodPercent + 0.5}`,
        strokeDashoffset: `${100 - badPercent - satisfactorilyPercent + 25}`,
        votes: good,
      },
      satisfactorily: {
        gradient: 'url(#lgrad2)',
        strokeDasharray: `${satisfactorilyPercent - 0.5} ${100 -
        satisfactorilyPercent + 0.5}`,
        strokeDashoffset: `${100 - badPercent + 25}`,
        votes: satisfactorily,
      },
      bad: {
        gradient: 'url(#lgrad3)',
        strokeDasharray: `${badPercent - 0.5} ${100 - badPercent + 0.5}`,
        strokeDashoffset: '25',
        votes: bad,
      },
    }

  .diagram
    .diagram__title Впечатления от номера
    .diagram__img
      svg(width="150px" height="150px" viewBox="0 0 42 42" class="donut")
        defs
         each element , key in gradients
           - const { start , end } = element
           linearGradient( id=`lgrad${key}` x1="50%" y1="100%" x2="50%" y2="0%")
             stop( offset="0%" style=`stop-color:rgb(${start});stop-opacity:1`)
             stop( offset="100%" style=`stop-color:rgb(${end});stop-opacity:1`)

        each element in svgElements
          - const { gradient , strokeDasharray ,strokeDashoffset, votes } = element
          if votes
            circle(
              class="diagram__unit js-unit" cx="20" cy="20"
              r="15.91549430918954" fill="none" stroke=gradient
              stroke-dasharray=strokeDasharray
              stroke-dashoffset=strokeDashoffset)
          g(fill=gradient
            class="diagram__chart-number diagram__chart-number_hidden js-number")
            text(x="48%" y="50%")=votes
            text(x="48%" y="50%" class="diagram__chart-label") голосов

        g( fill="#1f2041" class="diagram__chart-number js-votes")
          text(x="48%" y="50%" )=votes
          text(x="48%" y="50%" class="diagram__chart-label") голосов

      ul.diagram__legend.js-legend
        each text in legendElements
          li.diagram__legend-el.js-legend-el= text
